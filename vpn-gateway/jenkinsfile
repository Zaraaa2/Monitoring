pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'wireguard-gateway'
        CONFIG_PATH = 'config/wg0.conf'
    }
    
    stages {
        stage('📥 Checkout from GitHub') {
            steps {
                echo "=== Cloning repository from GitHub ==="
                checkout scm
                sh 'git log -1 --pretty=format:"%h - %an: %s"'
                sh 'ls -la'
            }
        }
        
        stage('🔍 Validate Config Files') {
            steps {
                echo "=== Validating WireGuard config ==="
                script {
                    if (fileExists(env.CONFIG_PATH)) {
                        echo "✅ ${env.CONFIG_PATH} found"
                        sh "cat ${env.CONFIG_PATH} | head -20"
                    } else {
                        error "❌ ${env.CONFIG_PATH} not found!"
                    }
                }
            }
        }
        
        stage('🧪 Test Config Syntax') {
            steps {
                echo "=== Testing WireGuard config syntax ==="
                sh '''
                    # Basic validation: check if required sections exist
                    if grep -q "\\[Interface\\]" config/wg0.conf; then
                        echo "✅ [Interface] section found"
                    else
                        echo "❌ [Interface] section missing!"
                        exit 1
                    fi
                    
                    if grep -q "ListenPort" config/wg0.conf; then
                        echo "✅ ListenPort configured"
                    else
                        echo "⚠️  Warning: ListenPort not configured"
                    fi
                    
                    echo "✅ Config syntax validation passed"
                '''
            }
        }
        
        stage('💾 Backup Current Config') {
            steps {
                echo "=== Backing up current WireGuard config ==="
                sh """
                    docker exec wireguard cp /config/wg0.conf /config/wg0.conf.backup-${BUILD_NUMBER} || true
                    echo "✅ Backup created: wg0.conf.backup-${BUILD_NUMBER}"
                    docker exec wireguard ls -lh /config/*.backup* | tail -5 || echo "No previous backups"
                """
            }
        }
        
        stage('🚀 Deploy New Config') {
            steps {
                echo "=== Deploying new config to WireGuard ==="
                sh """
                    # Copy new config to container
                    docker cp ${env.CONFIG_PATH} wireguard:/config/wg0.conf
                    
                    # Verify file copied
                    docker exec wireguard ls -lh /config/wg0.conf
                    echo "✅ Config deployed successfully"
                """
            }
        }
        
        stage('🔄 Restart WireGuard') {
            steps {
                echo "=== Restarting WireGuard service ==="
                sh """
                    docker restart wireguard
                    echo "⏳ Waiting for WireGuard to start..."
                    sleep 10
                """
            }
        }
        
        stage('✅ Health Check') {
            steps {
                echo "=== Verifying WireGuard is running ==="
                sh """
                    # Check container is running
                    docker ps | grep wireguard || exit 1
                    
                    # Check WireGuard interface
                    docker exec wireguard wg show | head -10
                    
                    echo "✅ WireGuard is healthy and running!"
                """
            }
        }
    }
    
    post {
        success {
            echo '🎉 Deployment completed successfully!'
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Build: #${BUILD_NUMBER}"
            echo "Commit: ${GIT_COMMIT}"
            echo "Branch: ${GIT_BRANCH}"
            echo "Time: ${new Date()}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        }
        failure {
            echo '❌ Deployment failed!'
            echo '🔄 Rolling back to previous config...'
            sh """
                docker exec wireguard cp /config/wg0.conf.backup-${BUILD_NUMBER} /config/wg0.conf || true
                docker restart wireguard || true
                echo "⚠️  Rollback completed"
            """
        }
        always {
            echo '📊 Pipeline execution completed'
            sh 'docker exec wireguard wg show | head -5 || true'
        }
    }
}
